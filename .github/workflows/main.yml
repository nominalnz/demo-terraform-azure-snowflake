name: Run Azure CLI Login with OpenID Connect
on: [workflow_dispatch]

permissions:
  id-token: write # Require write permission to Fetch an OIDC token.
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    environment: Production
    steps:
    - run: echo $ACTIONS_ID_TOKEN_REQUEST_URL
    - run: echo $ACTIONS_ID_TOKEN_REQUEST_TOKEN

    # - run: |
    #     curl -X POST \
    #       -H "Content-Type: application/x-www-form-urlencoded" \
    #       -d "client_id=${{ secrets.AZURE_CLIENT_ID }}" \
    #       -d "client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer" \
    #       -d "client_assertion=$ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
    #       -d "grant_type=client_credentials" \
    #       -d "scope=${{ secrets.OAUTH_SERVER_IDENTIFIER_URI }}/.default" \
    #       "https://login.microsoftonline.com/${{ secrets.AZURE_TENANT_ID }}/oauth2/v2.0/token"

    - uses: actions/github-script@v6
      id: script
      timeout-minutes: 10
      with:
        debug: true
        script: |
          const token = process.env['ACTIONS_RUNTIME_TOKEN']
          const runtimeUrl = process.env['ACTIONS_ID_TOKEN_REQUEST_URL']
          core.setOutput('TOKEN', token.trim())
          core.setOutput('IDTOKENURL', runtimeUrl.trim())
          
    - run: |
        IDTOKEN=$(curl -H "Authorization: bearer  ${{steps.script.outputs.TOKEN}}" ${{steps.script.outputs.IDTOKENURL}}  -H "Accept: application/json; api-version=2.0" -H "Content-Type: application/json" -d "{}" | jq -r '.value')
        echo $IDTOKEN
        jwtd() {
            if [[ -x $(command -v jq) ]]; then
                jq -R 'split(".") | .[0],.[1] | @base64d | fromjson' <<< "${1}"
                echo "Signature: $(echo "${1}" | awk -F'.' '{print $3}')"
            fi
        }
        jwtd $IDTOKEN
        echo "idToken=${IDTOKEN}" >> $GITHUB_OUTPUT
      id: tokenid

    - name: Azure CLI Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        # subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        allow-no-subscriptions: true
  
    - name: Azure CLI script
      uses: azure/cli@v2
      with:
        azcliversion: latest
        inlineScript: |
          az account show
          # You can write your Azure CLI inline scripts here.
  
    - name: Azure CLI script
      uses: azure/cli@v2
      with:
        azcliversion: latest
        inlineScript: |
          az account get-access-token --scope ${{ secrets.OAUTH_SERVER_IDENTIFIER_URI }}/.default